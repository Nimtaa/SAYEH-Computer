library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity MRUArray is port(

clk  ,reset_n ,
mruwaybitprevios : in std_logic;
index : in std_logic_vector(5 downto 0);
wayoutput : out std_logic --1 => update in way1 , 0=> update in way0
);
end entity;


architecture arch of MRUArray is

--  component Tag_Valid_Array1 is port(-
  --clk , wren  : in std_logic ;
  --address : in std_logic_vector(5 downto 0);
--  wrdata : in std_logic_vector(3 downto 0);-
  --data : out std_logic_vector(4 downto 0);
  --invalidate : in std_logic
  --);

--end component;
--component Tag_Valid_Array2 is port(
--clk , wren  : in std_logic ;
--address : in std_logic_vector(5 downto 0);
--wrdata : in std_logic_vector(3 downto 0);
--data : out std_logic_vector(4 downto 0);
--invalidate : in std_logic
--);

--end component;

signal valibitway0_signal , validbitway1_signal : std_logic_vector(4 downto 0);

type counterArrayw0 is array (0 to 63) of integer;
signal counterw0 : counterArrayw0 := ( others => 0);


type counterArrayw1 is array (0 to 63) of integer;
signal counterw1 :counterArrayw1 := ( others => 0);


begin

--T1 : Tag_Valid_Array1 port map (clk , '0',index,"0000",valibitway0_signal,'0');
--T2 : Tag_Valid_Array2 port map (clk , '0' , index , "0000" , validbitway1_signal , '0');



    process(clk)
    begin

      if reset_n ='1' then
      if counterw0(to_integer(unsigned(index)))>=counterw1(to_integer(unsigned(index))) then
      counterw0(to_integer(unsigned(index))) <= 0;
    else
      counterw1(to_integer(unsigned(index))) <= 0;
end if;

      elsif clk = '1' then  ---codes starts from here
      ---we have missed data and want to replace or write to cache



    if(mruwaybitprevios='1') then  ---read from w1
       counterw1(to_integer(unsigned(index)))<=counterw1( to_integer(unsigned(index)))+1;
     elsif (mruwaybitprevios='0') then --read from w0
       counterw0(to_integer(unsigned(index)))<=counterw0( to_integer(unsigned(index)))+1;
end if;

--data arrray is empty we can cache there
    --  if  validbitway0_signal(4) = '0' then -- way0 is empty
     -- wayoutput <='0';
   -- elsif validbitway1_signal(4)='0' then --way 1 is empty
    --  wayoutput <= '1';
      --here we comparate between number of refrence way0 and way1
    if counterw0(to_integer(unsigned(index))) > counterw1(to_integer(unsigned(index))) then
      wayoutput<='0';
    elsif counterw1(to_integer(unsigned(index))) > counterw0(to_integer(unsigned(index))) then
    wayoutput <='1';


      end if;
        end if;
     

    end process;




end architecture;
